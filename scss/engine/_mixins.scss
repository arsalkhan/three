// // @import "compass/css3";
// @import "compass/utilities";
@import "variables";


// Functions for px to em conversions
// ------------------------------------------------------------

@function emify($target, $context) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0em;
}

// Make px to ems using base-font-size
// echo as: font-size: em-font(#px);

@function em-font($target, $context: $base-font-size) {
   @return emify($target, $context);
}


// Make px to ems using base-line-height
// echo as: font-size: em-base(#px);

@function em-base($target, $context: $base-line-height) {
   @return emify($target, $context);
}


// Advanced typography settings
// -------------------------------------------------------

// Get advanced with type if needed for ligatures etc...

@mixin advancedtype {
	//font-variant-ligatures: contextual;  				// Set the default for ligatures
	//-moz-font-feature-settings: "liga=1,dlig=1";    	// Ligature settings for mozilla
	font-kerning: normal; 								// Set the default for kerning
	//-webkit-font-smoothing: antialiased; 				// Improve (or in some cases royally screw with) safari's legibility somewhat
	//font-synthesis: none; 							// Don't allow the font to create sythetic bold/italic
	//text-rendering: optimizeLegibility; 				// Improve kerning pairs. Webkit gets funny with this sometimes
}


// Retina images. 
// Use with care - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// -------------------------------------------------------

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// Transitions
// -------------------------------------------------------

// Set-up custom transitions
@mixin transit( $transition: $primary-transition ) {
  @extend %#{$transition};
}

@mixin trans( $property: all, $duration: 1s, $func: linear ) {
	@include transition-property($property); 
	@include transition-duration($duration); 
	@include transition-timing-function($func);
}

// @mixin trans( $property: color, $duration: 1s, $func: linear, $delay: 0s ) {
// 	@include transition-property($property); 
// 	@include transition-duration($duration); 
// 	@include transition-timing-function($func);
// }

// HEX to RGBA
// -------------------------------------------------------

@mixin rgba($color, $value) {
	background-color: $color;
	background-color: rgba($color, $value);
}


@mixin font-face($font: $primary-font){
	@font-face{
			    font-family: $font;
			    src: url('../fonts/#{$font}/#{$font}.eot');
			    src: url('../fonts/#{$font}/#{$font}.eot?#iefix') format('embedded-opentype'),
		        url('../fonts/#{$font}/#{$font}.woff') format('woff'),
		        url('../fonts/#{$font}/#{$font}.ttf') format('truetype'),
		        url('../fonts/#{$font}/#{$font}.svg##{$font}') format('svg');
		        font-weight: normal;
		        font-style: normal;
	}

@media screen and (-webkit-min-device-pixel-ratio:0) {
    @font-face {
      font-family: $font;
      src: url('../fonts/#{$font}/#{$font}.svg##{$font}') format('svg');
    }
}
}

@mixin respond($breakpoint: $sm) { // Change min-width to max-width if not using mobile-first approach
    @media only screen and (min-width: $breakpoint + px) { @content; }
}

// Rem fallback approach by Karl Merkli edited by Arsal Khan. It now takes values in px convert in rems and put a pixel fallback.
// @include rf(margin, 10, 20, 30, 40); // property-value pair
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rf($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value/10}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

@function remify($pxSize) {
  $remSize: $pxSize / 10px;
  @return #{$remSize}rem;
}

// Simple fallback for font-size for older browsers
@mixin font-size($pxSize) {
  font-size: $pxSize; //Fallback in px
  font-size: remify($pxSize);
}

@mixin align-vertically( $pxSize:10 ) { // negative values pull the element up. Positive value push the element down 
  @include rf( margin-top, $pxSize );
}

@mixin align-horizontally( $pxSize:10 ) { // negative values pull the element to left. Positive value push the element to right 
  @include rf( margin-top, $pxSize );
}